/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2018-2022 Andres Almiray.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
config {
    info {
        name          = rootProject.name
        description   = 'A collection of opinionated Gradle plugins'
        inceptionYear = '2018'
        tags          = ['project', 'configuration']

        specification {
            enabled = false
        }

        implementation {
            enabled = false
        }
    }

    docs {
        javadoc {
            enabled = false
        }

        groovydoc {
            enabled = true
            replaceJavadoc = true
            options {
                link 'https://docs.gradle.org/6.0/javadoc/', 'org.gradle.'
            }
        }
    }

    coverage {
        jacoco {
            toolVersion = jacocoVersion
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        flatDir { dir rootProject.file('libraries') }
    }
}

gradleProjects.subprojects {
    dir('plugins') {
        config {
            info {
                description = project_description
            }

            plugins {
                plugin {
                    name                = project.name - '-gradle-plugin'
                    id                  = project.pluginId
                    implementationClass = project.pluginImplementationClass
                }
            }

            test {
                useJUnitPlatform()
                testLogging {
                    events 'failed'
                    exceptionFormat 'full'
                }
            }
        }

        dependencies {
            compileOnly gradleApi()

            testImplementation gradleApi()
            testImplementation platform("org.spockframework:spock-bom:$spockVersion")
            testImplementation("org.spockframework:spock-core") {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
            testImplementation("org.spockframework:spock-junit4") {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
        }

        def scompat = project.findProperty('sourceCompatibility')
        def tcompat = project.findProperty('targetCompatibility')

        tasks.withType(JavaCompile) { JavaCompile c ->
            if (scompat) c.sourceCompatibility = scompat
            if (tcompat) c.targetCompatibility = tcompat
        }
        tasks.withType(GroovyCompile) { GroovyCompile c ->
            if (scompat) c.sourceCompatibility = scompat
            if (tcompat) c.targetCompatibility = tcompat
        }
    }
}
